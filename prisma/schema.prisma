generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model availabilityreservation {
  idavareser            Int                    @id @default(autoincrement())
  idreservation         Int?
  idemployeeava         Int?
  employee_availability employee_availability? @relation(fields: [idemployeeava], references: [idemployeeava], onDelete: Cascade, onUpdate: NoAction, map: "availabilityreservation_idea_fkey")
  reservation           reservation?           @relation(fields: [idreservation], references: [idreservation], onDelete: Cascade, onUpdate: NoAction)
}

model employee_availability {
  idemployeeava           Int                       @id @default(autoincrement())
  idemployee              Int
  daysoftheweek           String                    @db.VarChar(50)
  desde                   DateTime                  @db.Time(6)
  hasta                   DateTime                  @db.Time(6)
  availabilityreservation availabilityreservation[]
  employees               employees                 @relation(fields: [idemployee], references: [idemployee], onDelete: Cascade, onUpdate: NoAction, map: "employee_availability_id_employees_fkey")
}

model employees {
  idemployee            Int                     @id @default(autoincrement())
  firstname             String                  @db.VarChar(50)
  lastname              String                  @db.VarChar(50)
  address               String                  @db.VarChar(255)
  phonenumber           String                  @db.VarChar(12)
  specialty             String                  @db.VarChar(100)
  username              String                  @unique(map: "unique_username") @db.VarChar(255)
  password              String                  @db.VarChar(255)
  email                 String                  @unique(map: "unique_email") @db.VarChar(255)
  employee_availability employee_availability[]
  reservation           reservation[]
}

model reservation {
  idreservation           Int                       @id @default(autoincrement())
  iduser                  Int?
  idservice               Int?
  date                    DateTime?                 @db.Date
  hour                    DateTime?                 @db.Time(6)
  id_employee             Int
  status                  String?                   @default("pendiente") @db.VarChar(50)
  availabilityreservation availabilityreservation[]
  employees               employees                 @relation(fields: [id_employee], references: [idemployee], onDelete: NoAction, onUpdate: NoAction, map: "fk_reservation_employee")
  services                services?                 @relation(fields: [idservice], references: [idservice], onDelete: Cascade, onUpdate: NoAction)
  users                   users?                    @relation(fields: [iduser], references: [iduser], onDelete: Cascade, onUpdate: NoAction)
}

model roll {
  idroll      Int     @id @default(autoincrement())
  rollname    String  @unique(map: "roll_name_roll_key") @db.VarChar(50)
  permissions String? @db.VarChar(250)
  users       users[]
}

model servicecategory {
  idcategory   Int        @id @default(autoincrement())
  categoryname String?    @db.VarChar(50)
  services     services[]
}

model services {
  idservice       Int              @id @default(autoincrement())
  servicename     String?          @unique(map: "idx_unique_servicename") @db.VarChar(100)
  idcategory      Int?
  idtype          Int?
  duration    String 
  price           Int?
  reservation     reservation[]
  servicecategory servicecategory? @relation(fields: [idcategory], references: [idcategory], onDelete: NoAction, onUpdate: NoAction)
  servicetype     servicetype?     @relation(fields: [idtype], references: [idtype], onDelete: NoAction, onUpdate: NoAction)
  stockservice    stockservice[]
}

model servicetype {
  idtype   Int        @id @default(autoincrement())
  typename String?    @db.VarChar(50)
  services services[]
}

model stock {
  idstock      Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  description  String?        @db.VarChar(50)
  amount       Int?
  date         DateTime?      @db.Date
  stockservice stockservice[]
}

model stockservice {
  idstockservice Int       @id @default(autoincrement())
  idstock        Int?
  idservice      Int?
  quantityneeded Int?
  services       services? @relation(fields: [idservice], references: [idservice], onDelete: Cascade, onUpdate: NoAction)
  stock          stock?    @relation(fields: [idstock], references: [idstock], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  iduser          Int           @id @default(autoincrement())
  username        String        @unique @db.VarChar(50)
  password        String        @db.VarChar(255)
  firstname       String        @db.VarChar(50)
  lastname        String        @db.VarChar(50)
  email           String        @unique @db.VarChar(100)
  phonenumber     String        @db.VarChar(11)
  address         String        @db.VarChar(255)
  idroll          Int
  status          String?       @db.VarChar(20)
  fecha_ingresado DateTime      @default(dbgenerated("CURRENT_DATE")) @db.Date
  reservation     reservation[]
  roll            roll          @relation(fields: [idroll], references: [idroll], onDelete: NoAction, onUpdate: NoAction, map: "users_id_roll_fkey")
}
